service: vide-oh

provider:
  name: aws
  runtime: provided.al2023
  region: eu-central-1
  memorySize: 512
  timeout: 5
  stage: dev
  apiGateway:
    apiKeys:
      - videohApiKey
    usagePlan:
      quota:
        limit: 3000
        period: MONTH
      # throttle:
      #   burstLimit: 5
      #   rateLimit: 1
    binaryMediaTypes:
      - '*/*'
      # - 'multipart/form-data'
      # - 'image/png'
      # - 'video/mp4'
      # - 'application/json'
      # # - 'text/html'
    websocketApiId:
      "Fn::ImportValue": WebSocketApiId
  vpc:
    securityGroupIds:
      - "Fn::ImportValue": LambdaSecurityGroupId
    subnetIds:
      - "Fn::ImportValue": VpcPrivateSubnet1
  environment:
    DB_SECRET_NAME:
      "Fn::ImportValue": RdsSecretName
    REGION: ${self:provider.region}
  # logs:
  #   restApi:
  #     executionLogging: true
  #     level: INFO
  #     fullExecutionData: true

package:
  individually: true

functions:
  userHandler:
    handler: user-service/bin/bootstrap
    timeout: 30
    environment:
      KEY_SECRET_NAME: VideohSecretKey
    events:
      - http:
          path: /api/users/ping
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/login
          method: POST
          cors: true
          private: true
      - http:
          path: /api/users/register
          method: POST
          cors: true
          private: true
      - http:
          path: /api/users/secured/ping
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/secured/user/all-registered
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/secured/block/{email}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/secured/user/{id}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/secured/user/current
          method: GET
          cors: true
          private: true
      - http:
          path: /api/users/secured/user/change-name
          method: GET
          cors: true
          private: true
    role: videohRole
    package:
      artifact: user-service/bin/lambda-handler.zip

  videoHandler:
    handler: video-service/bin/bootstrap
    timeout: 30
    events:
      - http:
          path: /api/videos/ping
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/videos/upload-video
          method: POST
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/videos/video-stream/{name}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/videos/report-video/{id}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/videos/search-videos
          method: GET
          cors: true
          private: true
      - http:
          path: /api/videos/all-reported-videos
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/videos/delete-video/{id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
    role: videohRole
    package:
      artifact: video-service/bin/lambda-handler.zip

  commentHandler:
    handler: comment-service/bin/bootstrap
    timeout: 30
    events:
      - http:
          path: /api/comments/{video_id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/comments
          method: POST
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/comments/reported
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/comments/delete/{comment_id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/comments/report/{comment_id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/ratings
          method: POST
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/ratings/total/{video_id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/ratings/user/{owner_email}/{video_id}
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
    role: videohRole
    package:
      artifact: comment-service/bin/lambda-handler.zip

  supportHandler:
    handler: support-service/bin/bootstrap
    timeout: 30
    environment:
      WEBSOCKET_API_URL:
        Fn::ImportValue: WebSocketApiEndpoint
      TABLE_NAME_CONNECTIONS:
        Fn::ImportValue: TableNameConnections
    events:
      - http:
          path: /api/messages/{email}/all
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - http:
          path: /api/messages/user-emails
          method: GET
          cors: true
          private: true
          authorizer:
            name: userAuthorizer
            type: REQUEST
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
      - websocket:
          route: $connect
          routeResponseSelectionExpression: $default
          authorizer:
            name: userAuthorizer
            identitySource: 'route.request.querystring.token'
      - websocket:
          route: $disconnect
          # routeResponseSelectionExpression: $default
      - websocket:
          route: $default
          # routeResponseSelectionExpression: $default
    role: videohRole
    package:
      artifact: support-service/bin/lambda-handler.zip

  userAuthorizer:
    handler: user-service/bin/bootstrap
    environment:
      KEY_SECRET_NAME: VideohSecretKey
    events:
      - http:
          path: /api/authorize
          method: GET
    role: videohRole
    package:
      artifact: user-service/bin/lambda-authorizer.zip

resources:
  Resources:
    videohRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /videoh/
        RoleName: VideohRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: allowLogsAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vide-oh*"
          - PolicyName: allowSecretsManagerAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    - Fn::Sub: 
                        - "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}*"
                        - SecretName: !ImportValue RdsSecretName
                    - Fn::Sub: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:VideohSecretKey*"
          - PolicyName: allowS3Access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - "arn:aws:s3:::vide-oh-videos/*"
          - PolicyName: allowWebSocketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: execute-api:ManageConnections
                  Resource:
                    - Fn::Join:
                        - ""
                        - - "arn:aws:execute-api:"
                          - Ref: "AWS::Region"
                          - ":"
                          - Ref: "AWS::AccountId"
                          - ":"
                          - Fn::ImportValue: WebSocketApiId
                          - "/dev/POST/@connections/*"
          - PolicyName: allowDynamoDBAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                  Resource:
                    - Fn::Join:
                        - ""
                        - - "arn:aws:dynamodb:"
                          - Ref: "AWS::Region"
                          - ":"
                          - Ref: "AWS::AccountId"
                          - ":table/"
                          - Fn::ImportValue: TableNameConnections
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole